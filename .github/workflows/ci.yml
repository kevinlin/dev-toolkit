name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Lint with Ruff
      run: |
        echo "::group::Ruff Check"
        ruff check . --output-format=github
        echo "::endgroup::"
        
        echo "::group::Ruff Format Check"
        ruff format --check .
        echo "::endgroup::"

    - name: Security scan with Bandit
      run: |
        echo "::group::Bandit Security Scan"
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
        echo "::endgroup::"

    - name: Dependency vulnerability scan
      run: |
        echo "::group::Dependency Vulnerability Scan"
        pip-audit --desc --output=json --output-file=pip-audit-report.json || true
        pip-audit --desc
        echo "::endgroup::"

    - name: Run tests with pytest
      run: |
        echo "::group::Run Tests"
        pytest --cov-report=xml --cov-report=term-missing
        echo "::endgroup::"

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload security scan results
      if: matrix.python-version == '3.11'
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          pip-audit-report.json

  quality-gate:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check job results
      run: |
        if [[ "${{ needs.lint-and-test.result }}" == "failure" ]]; then
          echo "Quality gate failed: Lint and test job failed"
          exit 1
        elif [[ "${{ needs.lint-and-test.result }}" == "cancelled" ]]; then
          echo "Quality gate cancelled: Lint and test job was cancelled"
          exit 1
        else
          echo "Quality gate passed: All checks successful"
        fi 